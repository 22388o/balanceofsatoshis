#!/usr/bin/env node
const prog = require('caporal');

const {getBalance} = require('./balances');
const {getChainFees} = require('./chain');
const {getChannelCloses} = require('./chain');
const {getExchangeRates} = require('./fiat');
const {getForwards} = require('./network');
const {getLiquidity} = require('./balances');
const {getUtxos} = require('./chain');
const {hiddenPay} = require('./network');
const {probeDestination} = require('./network');
const {returnCount} = require('./responses');
const {returnObject} = require('./responses');
const {splitUtxos} = require('./chain');
const {unlockWallet} = require('./wallets');
const {version} = require('./package');

prog
  .version(version)

  // Get local balance information
  .command('balance', 'Get total tokens')
  .argument('[node]', 'Node name')
  .option('--above <tokens>', 'Return tokens above watermark', prog.INT)
  .option('--below <tokens>', 'Return tokens below watermark', prog.INT)
  .option('--offchain', 'List only off-chain tokens')
  .option('--onchain', 'List only on-chain tokens')
  .action((args, options, logger) => {
    return new Promise((resolve, reject) => {
      return getBalance({
        above: options.above || undefined,
        below: options.below || undefined,
        is_offchain_only: !!options.offchain,
        is_onchain_only: !!options.onchain,
        node: args.node,
      },
      returnCount({logger, reject, resolve}));
    });
  })

  // Get the current chain fee rates
  .command('chainfees', 'Get the current chain fee estimates')
  .argument('[node]')
  .option('--blocks <depth>', 'Blocks confirm target depth to estimate to')
  .option('--file <path>', 'Write the output to a JSON file at desired path')
  .action((args, options, logger) => {
    return new Promise((resolve, reject) => {
      return getChainFees({
        blocks: options.blocks,
        node: args.node,
      },
      returnObject({logger, reject, resolve, file: options.file}))
    });
  })

  // Determine the outcomes of channel closings
  .command('closed', 'Get the status of a channel closings')
  .argument('[node]', 'Node name')
  .option('--limit', 'Limit of closings to get', prog.INT)
  .action((args, options, logger) => {
    return new Promise((resolve, reject) => {
      return getChannelCloses({
        limit: options.limit,
        node: args.node,
      },
      returnObject({logger, reject, resolve}));
    });
  })

  // Fan out utxos
  .command('fanout', 'Fan out utxos')
  .argument('<size>', 'UTXO minimum size', prog.INT)
  .argument('<count>', 'Desired number of total utxos', prog.INT)
  .argument('[node]', 'Node name')
  .option('--confirmed', 'Only consider confirmed existing utxos')
  .option('--dryrun', 'Execute a fan-out dry run')
  .option('--feerate <feerate>', 'Feerate in per vbyte rate', prog.INT)
  .action((args, options, logger) => {
    return new Promise((resolve, reject) => {
      return splitUtxos({
        count: args.count,
        is_confirmed: !!option.confirmed,
        is_dry_run: !!options.dryrun,
        node: args.node,
        size: args.size,
        tokens_per_vbyte: options.feerate,
      },
      returnObject({logger, reject, resolve}));
    });
  })

  // Get forwards
  .command('forwards', 'Get forwards')
  .argument('[node]', 'Node name')
  .option('--days <days>', 'Number of past days to evaluate', prog.INT)
  .action((args, options, logger) => {
    return new Promise((resolve, reject) => {
      return getForwards({
        days: options.days,
        node: args.node,
      },
      returnObject({logger, reject, resolve}));
    });
  })

  // Pay an invoice using only Tor nodes or unadvertised IP hops
  .command('hiddenpay', 'Pay an invoice over only Tor or unadvertised IP hops')
  .argument('<request>', 'Payment Request')
  .argument('[node]', 'Node name')
  .action((args, options, logger) => {
    return new Promise((resolve, reject) => {
      return hiddenPay({
        node: args.node,
        request: args.request,
      },
      returnObject({logger, reject, resolve}));
    });
  })

  // Get inbound liquidity information: available inbound off-chain tokens
  .command('inbound-liquidity', 'Get inbound liquidity')
  .argument('[node]', 'Node name')
  .option('--above <tokens>', 'Return amount above watermark', prog.INT)
  .option('--below <tokens>', 'Return amount above watermark', prog.INT)
  .option('--top', 'Top percentile inbound liquidity in an individual channel')
  .action((args, options, logger) => {
    return new Promise((resolve, reject) => {
      return getLiquidity({
        above: options.above || undefined,
        below: options.below || undefined,
        is_top: options.top || undefined,
        node: args.node,
      },
      returnCount({logger, reject, resolve}));
    });
  })

  // Get outbound liquidity information: available outbound off-chain tokens
  .command('outbound-liquidity', 'Get outbound liquidity')
  .argument('[node]', 'Node name')
  .option('--above <tokens>', 'Return amount above watermark', prog.INT)
  .option('--below <tokens>', 'Return amount above watermark', prog.INT)
  .option('--top', 'Top percentile inbound liquidity in an individual channel')
  .action((args, options, logger) => {
    return new Promise((resolve, reject) => {
      return getLiquidity({
        above: options.above || undefined,
        below: options.below || undefined,
        is_outbound: true,
        is_top: options.top || undefined,
        node: args.node,
      },
      returnCount({logger, reject, resolve}));
    });
  })

  // Get the current fiat exchange price
  .command('price', 'Get the price')
  .argument('[symbols...]', 'Desired fiat tickers')
  .option('--file <path>', 'Write the output to a JSON file at desired path')
  .action((args, options, logger) => {
    return new Promise((resolve, reject) => {
      return getExchangeRates({
        symbols: args.symbols.map(n => n.toUpperCase()),
      },
      returnObject({logger, reject, resolve, file: options.file}))
    });
  })

  // Determine if a payment request is sendable
  .command('probe', 'Check if a payment request is sendable')
  .argument('<request>', 'Payment Request')
  .argument('[node]', 'Node name')
  .action((args, options, logger) => {
    return new Promise((resolve, reject) => {
      return probeDestination({
        node: args.node,
        request: args.request,
      },
      returnObject({logger, reject, resolve}));
    });
  })

  // Unlock wallet
  .command('unlock', 'Unlock wallet if locked')
  .argument('<path_to_password_file>', 'Path to password file')
  .argument('[node]', 'Node name')
  .action((args, options, logger) => {
    return new Promise((resolve, reject) => {
      return unlockWallet({
        node: args.node,
        path_to_password_file: args.pathToPasswordFile,
      },
      returnObject({logger, reject, resolve}));
    });
  })

  // Get utxos
  .command('utxos', 'Get a list of utxos')
  .argument('[node]', 'Node name')
  .option('--confirmed', 'Return only confirmed utxos')
  .option('--count', 'Return the count of utxos')
  .option('--size', 'Utxos of size greater than or equal to specified amount')
  .action((args, options, logger) => {
    return new Promise((resolve, reject) => {
      return getUtxos({
        is_confirmed: !!options.confirmed,
        is_count: !!options.count,
        min_tokens: options.size || undefined,
        node: args.node,
      },
      returnObject({logger, reject, resolve}));
    });
  });

prog.parse(process.argv);
